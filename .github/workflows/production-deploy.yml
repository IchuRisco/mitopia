name: Production Deployment

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd apps/web && npm ci
          cd ../../services/api && npm ci

      - name: Run frontend tests
        run: cd apps/web && npm run test

      - name: Run backend tests
        run: cd services/api && npm run test

      - name: Run linting
        run: |
          cd apps/web && npm run lint
          cd ../../services/api && npm run lint

  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        service: [web, api, signaling, stt, translation, billing, notes]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service == 'web' && './apps/web' || format('./services/{0}', matrix.service) }}
          dockerfile: ${{ matrix.service == 'web' && 'Dockerfile' || 'Dockerfile.production' }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}

      - name: Deploy to production server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
            cd /opt/mitopia
            
            # Pull latest code
            git pull origin main
            
            # Update environment variables
            cp .env.production .env
            
            # Pull latest images
            docker-compose -f docker-compose.production.yml pull
            
            # Run database migrations
            docker-compose -f docker-compose.production.yml run --rm api npx prisma migrate deploy
            
            # Restart services with zero downtime
            docker-compose -f docker-compose.production.yml up -d --remove-orphans
            
            # Clean up old images
            docker image prune -f
            
            # Health check
            sleep 30
            curl -f https://api.mitopia.com/health || exit 1
            curl -f https://mitopia.com/health || exit 1
          EOF

      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api:main
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run load tests
        run: |
          npm install -g artillery
          artillery run tests/load/api-load-test.yml --target https://api.mitopia.com

      - name: Run lighthouse performance audit
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            https://mitopia.com
            https://mitopia.com/login
            https://mitopia.com/dashboard
          configPath: ./lighthouse.json
          uploadArtifacts: true
          temporaryPublicStorage: true
