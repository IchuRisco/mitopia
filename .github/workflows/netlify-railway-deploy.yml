name: Deploy to Netlify + Railway

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Frontend Tests
  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'apps/web/package-lock.json'

      - name: Install frontend dependencies
        run: |
          cd apps/web
          npm ci

      - name: Run frontend linting
        run: |
          cd apps/web
          npm run lint

      - name: Run frontend tests
        run: |
          cd apps/web
          npm run test

      - name: Build frontend
        run: |
          cd apps/web
          npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: apps/web/dist

  # Backend API Tests
  test-backend-api:
    name: Test Backend API
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'services/api/package-lock.json'

      - name: Install API dependencies
        run: |
          cd services/api
          npm ci

      - name: Run API linting
        run: |
          cd services/api
          npm run lint

      - name: Run API tests
        run: |
          cd services/api
          npm run test

      - name: Build API
        run: |
          cd services/api
          npm run build

  # Backend Signaling Tests
  test-backend-signaling:
    name: Test Backend Signaling
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'services/signaling/package-lock.json'

      - name: Install Signaling dependencies
        run: |
          cd services/signaling
          npm ci

      - name: Run Signaling linting
        run: |
          cd services/signaling
          npm run lint

      - name: Build Signaling
        run: |
          cd services/signaling
          npm run build

  # Python Services Tests
  test-python-services:
    name: Test Python Services
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [stt, translation, notes]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          cd services/${{ matrix.service }}
          pip install -r requirements.txt
          pip install pytest flake8

      - name: Run linting
        run: |
          cd services/${{ matrix.service }}
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Run tests
        run: |
          cd services/${{ matrix.service }}
          python -m pytest tests/ || echo "No tests found"

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend-api]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Deploy to Railway (Backend Services)
  deploy-railway:
    name: Deploy to Railway
    runs-on: ubuntu-latest
    needs: [test-backend-api, test-backend-signaling, test-python-services]
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        service: [api, signaling, billing, stt, translation, notes]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Railway CLI
        run: npm install -g @railway/cli

      - name: Deploy to Railway
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          cd services/${{ matrix.service }}
          railway login --token $RAILWAY_TOKEN
          railway up --service mitopia-${{ matrix.service }}

  # Deploy to Netlify (Frontend)
  deploy-netlify:
    name: Deploy to Netlify
    runs-on: ubuntu-latest
    needs: [test-frontend]
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'apps/web/package-lock.json'

      - name: Install dependencies
        run: |
          cd apps/web
          npm ci

      - name: Build frontend
        env:
          VITE_API_URL: ${{ secrets.VITE_API_URL }}
          VITE_SIGNALING_URL: ${{ secrets.VITE_SIGNALING_URL }}
          VITE_TRANSLATION_URL: ${{ secrets.VITE_TRANSLATION_URL }}
          VITE_BILLING_URL: ${{ secrets.VITE_BILLING_URL }}
          VITE_STRIPE_PUBLISHABLE_KEY: ${{ secrets.VITE_STRIPE_PUBLISHABLE_KEY }}
        run: |
          cd apps/web
          npm run build

      - name: Deploy to Netlify
        uses: nwtgck/actions-netlify@v2.0
        with:
          publish-dir: './apps/web/dist'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy from GitHub Actions"
          enable-pull-request-comment: true
          enable-commit-comment: true
          overwrites-pull-request-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [deploy-railway, deploy-netlify]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install test dependencies
        run: |
          npm install -g playwright
          playwright install

      - name: Run integration tests
        env:
          TEST_BASE_URL: ${{ secrets.NETLIFY_PREVIEW_URL || 'https://mitopia.netlify.app' }}
          TEST_API_URL: ${{ secrets.VITE_API_URL }}
        run: |
          npx playwright test tests/integration/

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: test-results/

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [deploy-netlify]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            ${{ secrets.NETLIFY_PREVIEW_URL || 'https://mitopia.netlify.app' }}
            ${{ secrets.NETLIFY_PREVIEW_URL || 'https://mitopia.netlify.app' }}/login
            ${{ secrets.NETLIFY_PREVIEW_URL || 'https://mitopia.netlify.app' }}/dashboard
          configPath: './lighthouse.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

  # Notify Success
  notify-success:
    name: Notify Deployment Success
    runs-on: ubuntu-latest
    needs: [deploy-railway, deploy-netlify, integration-tests]
    if: success() && github.ref == 'refs/heads/main'
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          message: |
            üéâ Mitopia deployed successfully!
            
            Frontend: https://mitopia.netlify.app
            API: ${{ secrets.VITE_API_URL }}
            
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # Notify Failure
  notify-failure:
    name: Notify Deployment Failure
    runs-on: ubuntu-latest
    needs: [deploy-railway, deploy-netlify]
    if: failure() && github.ref == 'refs/heads/main'
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          message: |
            ‚ùå Mitopia deployment failed!
            
            Check the logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
