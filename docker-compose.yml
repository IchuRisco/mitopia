# Mitopia Development Environment
# Complete stack with subscription billing and real-time translation

version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: mitopia-postgres
    environment:
      POSTGRES_DB: mitopia
      POSTGRES_USER: mitopia
      POSTGRES_PASSWORD: mitopia_dev_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mitopia"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: mitopia-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # RabbitMQ for message queues
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: mitopia-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: mitopia
      RABBITMQ_DEFAULT_PASS: mitopia_dev_password
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # TURN server for WebRTC
  coturn:
    image: coturn/coturn:latest
    container_name: mitopia-coturn
    ports:
      - "3478:3478/udp"
      - "3478:3478/tcp"
      - "49152-65535:49152-65535/udp"
    volumes:
      - ./config/turnserver.conf:/etc/coturn/turnserver.conf
    command: ["-c", "/etc/coturn/turnserver.conf"]
    restart: unless-stopped

  # Main API service
  api:
    build:
      context: ./services/api
      dockerfile: Dockerfile
    container_name: mitopia-api
    ports:
      - "8001:8001"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://mitopia:mitopia_dev_password@postgres:5432/mitopia
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://mitopia:mitopia_dev_password@rabbitmq:5672
      - JWT_SECRET=mitopia_jwt_secret_dev_key_2024
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - FRONTEND_URL=http://localhost:3000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./services/api:/app
      - /app/node_modules
    restart: unless-stopped

  # WebRTC signaling service
  signaling:
    build:
      context: ./services/signaling
      dockerfile: Dockerfile
    container_name: mitopia-signaling
    ports:
      - "8002:8002"
    environment:
      - NODE_ENV=development
      - REDIS_URL=redis://redis:6379
      - API_SERVICE_URL=http://api:8001
      - TURN_SERVER_URL=turn:coturn:3478
      - TURN_USERNAME=mitopia
      - TURN_PASSWORD=mitopia_turn_secret
    depends_on:
      redis:
        condition: service_healthy
      api:
        condition: service_started
    volumes:
      - ./services/signaling:/app
      - /app/node_modules
    restart: unless-stopped

  # Speech-to-text service
  stt:
    build:
      context: ./services/stt
      dockerfile: Dockerfile
    container_name: mitopia-stt
    ports:
      - "8003:8003"
    environment:
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://mitopia:mitopia_dev_password@rabbitmq:5672
      - API_SERVICE_URL=http://api:8001
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./services/stt:/app
      - stt_models:/app/models
    restart: unless-stopped

  # Real-time translation service
  translation:
    build:
      context: ./services/translation
      dockerfile: Dockerfile
    container_name: mitopia-translation
    ports:
      - "8004:8004"
    environment:
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://mitopia:mitopia_dev_password@rabbitmq:5672
      - API_SERVICE_URL=http://api:8001
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./services/translation:/app
      - translation_models:/app/models
    restart: unless-stopped

  # Billing and subscription service
  billing:
    build:
      context: ./services/billing
      dockerfile: Dockerfile
    container_name: mitopia-billing
    ports:
      - "8005:8005"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://mitopia:mitopia_dev_password@postgres:5432/mitopia
      - REDIS_URL=redis://redis:6379
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - PAYPAL_CLIENT_ID=${PAYPAL_CLIENT_ID}
      - PAYPAL_CLIENT_SECRET=${PAYPAL_CLIENT_SECRET}
      - FRONTEND_URL=http://localhost:3000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./services/billing:/app
      - /app/node_modules
    restart: unless-stopped

  # AI notes processing service
  notes:
    build:
      context: ./services/notes
      dockerfile: Dockerfile
    container_name: mitopia-notes
    ports:
      - "8006:8006"
    environment:
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://mitopia:mitopia_dev_password@rabbitmq:5672
      - API_SERVICE_URL=http://api:8001
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./services/notes:/app
      - notes_models:/app/models
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  stt_models:
  translation_models:
  notes_models:

networks:
  default:
    name: mitopia-network
